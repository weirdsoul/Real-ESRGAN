# Real-ESRGAN training config file I (Philip Hofmann, or Helaman in discord) used for an anime compact model, but adapted/simplified (gt_size, batch size, loss functions, no pretrain and no validation) for a tutorial

name: to_vhs # change this name to your model name
model_type: RealESRGANModel
scale: 1
num_gpu: auto
manual_seed: 0

l1_gt_usm: True
percep_gt_usm: True
gan_gt_usm: False

high_order_degradation: False # do not use the high-order degradation generation process

datasets:
  train:
    name: VHS
    type: RealESRGANPairedDataset
    dataroot_gt: /media/bulk_data/superres/training/paired_vcr_ds # change this path to the folder where you have your ground truth
    dataroot_lq: /media/bulk_data/superres/training/paired_vcr_ds # change this path to the folder where you have your ground truth
    meta_info: /media/bulk_data/superres/training/paired_vcr_ds/paired_vcr.txt # change this path to the meta info file
    io_backend:
      type: disk
    
    gt_size: 256 # used 384
    use_hflip: True
    use_rot: False

    use_shuffle: true
    num_worker_per_gpu: 8
    batch_size_per_gpu: 4 # I originally used 12 here. Change/lower this value if you get an error thats something like 'cuda ran out of vram'. Bigger value gives better result.
    dataset_enlarge_ratio: 1
    prefetch_mode: ~

network_g:
  type: SRVGGNetCompact
  num_in_ch: 3
  num_out_ch: 3
  num_feat: 64
  num_conv: 16
  upscale: 1
  act_type: prelu

network_d:
  type: UNetDiscriminatorSN
  num_in_ch: 3
  num_feat: 64
  skip_connection: True

path:
#  pretrain_network_g: /home/weirdsoul/coding/Real-ESRGAN/weights/4xVHSUpscaling_g_349000.pth
  param_key_g: params_ema
  strict_load_g: true

train:
  ema_decay: 0.999
  optim_g:
    type: Adam
    lr: !!float 1e-4
    weight_decay: 0
    betas: [0.9, 0.99]
  optim_d:
    type: Adam
    lr: !!float 1e-4
    weight_decay: 0
    betas: [0.9, 0.99]

  scheduler:
    type: MultiStepLR
    milestones: [400000]
    gamma: 0.5

  total_iter: 400000
  warmup_iter: -1

  pixel_opt:
    type: L1Loss
    loss_weight: 1.0
    reduction: mean
  perceptual_opt:
    type: PerceptualLoss
    layer_weights:
      'conv1_2': 0.1
      'conv2_2': 0.1
      'conv3_4': 1
      'conv4_4': 1
      'conv5_4': 1
    vgg_type: vgg19
    use_input_norm: true
    perceptual_weight: !!float 1.0
    style_weight: 0
    range_norm: false
    criterion: l1
  gan_opt:
    type: GANLoss
    gan_type: vanilla
    real_label_val: 1.0
    fake_label_val: 0.0
    loss_weight: !!float 1e-1

  net_d_iters: 1
  net_d_init_iters: 0

  val:
    val_freq: !!float 5e3
    save_img: True

    metrics:
      psnr: # metric name
        type: calculate_psnr
        crop_border: 4
        test_y_channel: false

logger:
  print_freq: 100
  save_checkpoint_freq: 1000
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

dist_params:
  backend: nccl
  port: 29500